import discord
from discord.ext import tasks
from discord import app_commands, client
import datetime

intents = discord.Intents.default()
intents.members = True
intents.presences = True  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–≥—Ä–æ–∫–æ–≤


@client.command()
async def ping(ctx):
    await ctx.send("pong!")


class MyClient(discord.Client):

    def __init__(self):
        super().__init__(intents=intents)
        self.tree = app_commands.CommandTree(self)

    async def setup_hook(self):
        await self.tree.sync()
        print("Slash –∫–æ–º–∞–Ω–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")


bot = MyClient()

# –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
members_data = {}
START_POINTS = 600
START_COEFF = 1
GAME_NAME = ["Grand Theft Auto V", "RAGE Multiplayer"]
LOG_CHANNEL_ID = 1390192173596676177  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–≤–æ–π ID


# ---------------------------------------------------------
# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–æ–≤
async def log(message):
    channel = bot.get_channel(LOG_CHANNEL_ID)
    if channel:
        await channel.send(f"[LOG] {message}")


# ---------------------------------------------------------
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∏–≥—Ä–∞–µ—Ç –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –≤ –Ω—É–∂–Ω—É—é –∏–≥—Ä—É
def is_playing_game(member, game_names):
    for activity in member.activities:
        name = getattr(activity, 'name', '').lower()
        details = getattr(activity, 'details', '')
        state = getattr(activity, 'state', '')
        if any(game.lower() in name for game in game_names):
            return True, activity.name
        if details and any(game.lower() in details.lower()
                           for game in game_names):
            return True, activity.name
        if state and any(game.lower() in state.lower() for game in game_names):
            return True, activity.name
    return False, None


# ---------------------------------------------------------
# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤
async def update_user_activity(member):
    if member.bot:
        return

    user = members_data.get(member.id)
    if not user:
        return

    if user.get('freeze'):
        return

    if 'vacation' in user:
        today = datetime.date.today()
        if user['vacation']['from'] <= today <= user['vacation']['to']:
            return

    is_playing, playing_game = is_playing_game(member, GAME_NAME)
    if is_playing:
        user['coeff'] += 0.025
        gained = 1 / user['coeff']
        user['points'] += gained
        await log(
            f"{member.name} –∏–≥—Ä–∞–µ—Ç –≤ {playing_game} ‚Äî +{gained:.2f} –ø–æ–∏–Ω—Ç–æ–≤")
    else:
        user['coeff'] -= 0.025
        user['points'] -= 1
        await log(f"{member.name} –Ω–µ –∏–≥—Ä–∞–µ—Ç ‚Äî -1 –ø–æ–∏–Ω—Ç")

    if user['points'] < 500:
        try:
            await member.send("–í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∑–∞ –Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–∏–Ω—Ç–æ–≤.")
        except:
            pass
        try:
            for guild in bot.guilds:
                await guild.kick(member)
        except:
            pass
        await log(f"{member.name} –±—ã–ª –∏—Å–∫–ª—é—á—ë–Ω –∑–∞ –Ω–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å.")


# ---------------------------------------------------------
# –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ on_presence_update, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
# @bot.event
# async def on_presence_update(before, after):
#     await update_user_activity(after)


# ---------------------------------------------------------
# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–∑ –≤ 30 –º–∏–Ω—É—Ç
@tasks.loop(minutes=30)
async def check_activity():
    print("=== –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ ===")
    for guild in bot.guilds:
        for member in guild.members:
            await update_user_activity(member)
    print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")


# ---------------------------------------------------------
# –°–ª—ç—à –∫–æ–º–∞–Ω–¥—ã
@bot.tree.command(name="addmember", description="–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞")
@app_commands.describe(member="–£—á–∞—Å—Ç–Ω–∏–∫")
async def addmember(interaction: discord.Interaction, member: discord.Member):
    members_data[member.id] = {
        'points': START_POINTS,
        'coeff': START_COEFF,
        'freeze': False
    }
    await interaction.response.send_message(
        f"{member.name} –¥–æ–±–∞–≤–ª–µ–Ω —Å {START_POINTS} –ø–æ–∏–Ω—Ç–∞–º–∏")
    await log(f"{member.name} –¥–æ–±–∞–≤–ª–µ–Ω.")


@bot.tree.command(name="remove", description="–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞")
@app_commands.describe(member="–£—á–∞—Å—Ç–Ω–∏–∫")
async def remove(interaction: discord.Interaction, member: discord.Member):
    if member.id in members_data:
        del members_data[member.id]
        await interaction.response.send_message(f"{member.name} —É–¥–∞–ª—ë–Ω.")
        await log(f"{member.name} —É–¥–∞–ª—ë–Ω.")


@bot.tree.command(name="checkpoint",
                  description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏–Ω—Ç–æ–≤ —É —É—á–∞—Å—Ç–Ω–∏–∫–∞")
@app_commands.describe(
    member="–£—á–∞—Å—Ç–Ω–∏–∫ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å, –ø–æ–∫–∞–∂–µ—Ç –≤–∞—à–∏ –ø–æ–∏–Ω—Ç—ã)")
async def checkpoint(interaction: discord.Interaction,
                     member: discord.Member = None):
    target = member or interaction.user
    user_data = members_data.get(target.id)
    if not user_data:
        await interaction.response.send_message(
            f"{target.name} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", ephemeral=True)
        return

    points = user_data['points']
    coeff = user_data['coeff']
    await interaction.response.send_message(
        f"üí∞ –£ **{target.name}** —Å–µ–π—á–∞—Å **{points:.2f}** –ø–æ–∏–Ω—Ç–æ–≤.\n"
        f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {coeff:.3f}",
        ephemeral=True)


@bot.tree.command(
    name="checkapi",
    description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–≥—Ä–∞–µ—Ç –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –≤ GTA V –∏–ª–∏ RAGE Multiplayer")
@app_commands.describe(member="–£—á–∞—Å—Ç–Ω–∏–∫ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å, –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—Å)")
async def checkapi(interaction: discord.Interaction,
                   member: discord.Member = None):
    target = member or interaction.user

    is_playing, playing_game = is_playing_game(target, GAME_NAME)

    if is_playing:
        await interaction.response.send_message(
            f"‚úÖ {target.name} —Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç –≤ **{playing_game}**.",
            ephemeral=True)
    else:
        await interaction.response.send_message(
            f"‚ùå {target.name} —Å–µ–π—á–∞—Å **–Ω–µ –∏–≥—Ä–∞–µ—Ç** –≤ GTA V –∏–ª–∏ RAGE Multiplayer.",
            ephemeral=True)


@bot.tree.command(name="debugstatus", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
@app_commands.describe(member="–£—á–∞—Å—Ç–Ω–∏–∫ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å, –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—Å)")
async def debugstatus(interaction: discord.Interaction,
                      member: discord.Member = None):
    target = member or interaction.user
    if not target.activities:
        await interaction.response.send_message("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –Ω–µ—Ç!",
                                                ephemeral=True)
        return

    msg = f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {target.name}:\n"
    for act in target.activities:
        msg += f"- name: {getattr(act, 'name', '')}\n"
        msg += f"  details: {getattr(act, 'details', '')}\n"
        msg += f"  state: {getattr(act, 'state', '')}\n\n"

    await interaction.response.send_message(msg, ephemeral=True)


@bot.tree.command(name="freez", description="–ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ")
async def freez(interaction: discord.Interaction):
    for user in members_data.values():
        user['freeze'] = True
    await interaction.response.send_message("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    await log("–ë–æ—Ç –±—ã–ª –∑–∞–º–æ—Ä–æ–∂–µ–Ω.")


@bot.tree.command(name="nofreez", description="–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ")
async def nofreez(interaction: discord.Interaction):
    for user in members_data.values():
        user['freeze'] = False
    await interaction.response.send_message("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await log("–ë–æ—Ç –±—ã–ª —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω.")


@bot.tree.command(name="sleep", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –æ—Ç–ø—É—Å–∫")
@app_commands.describe(member="–£—á–∞—Å—Ç–Ω–∏–∫",
                       date_from="–ù–∞—á–∞–ª–æ (YYYY-MM-DD)",
                       date_to="–ö–æ–Ω–µ—Ü (YYYY-MM-DD)")
async def sleep(interaction: discord.Interaction, member: discord.Member,
                date_from: str, date_to: str):
    if member.id in members_data:
        members_data[member.id]['vacation'] = {
            'from': datetime.datetime.strptime(date_from, "%Y-%m-%d").date(),
            'to': datetime.datetime.strptime(date_to, "%Y-%m-%d").date()
        }
        await interaction.response.send_message(
            f"{member.name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ—Ç–ø—É—Å–∫.")
        await log(f"{member.name} –≤ –æ—Ç–ø—É—Å–∫–µ.")


@bot.tree.command(name="addsleep", description="–í–µ—Ä–Ω—É—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –æ—Ç–ø—É—Å–∫–∞")
@app_commands.describe(member="–£—á–∞—Å—Ç–Ω–∏–∫")
async def addsleep(interaction: discord.Interaction, member: discord.Member):
    if member.id in members_data and 'vacation' in members_data[member.id]:
        del members_data[member.id]['vacation']
        await interaction.response.send_message(
            f"{member.name} –≤–µ—Ä–Ω—É–ª—Å—è –∏–∑ –æ—Ç–ø—É—Å–∫–∞.")
        await log(f"{member.name} –≤–µ—Ä–Ω—É–ª—Å—è –∏–∑ –æ—Ç–ø—É—Å–∫–∞.")


@bot.tree.command(name="updatemember", description="–û–±–Ω–æ–≤–∏—Ç—å –Ω–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞")
@app_commands.describe(member="–£—á–∞—Å—Ç–Ω–∏–∫", new_name="–ù–æ–≤—ã–π –Ω–∏–∫")
async def updatemember(interaction: discord.Interaction,
                       member: discord.Member, new_name: str):
    await member.edit(nick=new_name)
    await interaction.response.send_message(f"–ù–∏–∫ {member.name} –æ–±–Ω–æ–≤–ª—ë–Ω.")
    await log(f"–ù–∏–∫ {member.name} –æ–±–Ω–æ–≤–ª—ë–Ω.")


@bot.tree.command(name="uppoint", description="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∏–Ω—Ç—ã")
@app_commands.describe(member="–£—á–∞—Å—Ç–Ω–∏–∫", points="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
async def uppoint(interaction: discord.Interaction, member: discord.Member,
                  points: int):
    if member.id in members_data:
        members_data[member.id]['points'] += points
        await interaction.response.send_message(
            f"{points} –ø–æ–∏–Ω—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ {member.name}.")
        await log(f"{points} –ø–æ–∏–Ω—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ {member.name}.")


@bot.tree.command(name="ratio", description="–û–±–Ω–æ–≤–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç")
@app_commands.describe(mode="day –∏–ª–∏ night")
async def ratio(interaction: discord.Interaction, mode: str):
    if mode == 'day':
        for user in members_data.values():
            user['coeff'] += 0.025
    elif mode == 'night':
        for user in members_data.values():
            user['coeff'] += 0.030
    await interaction.response.send_message(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {mode}.")


@bot.tree.command(name="sync", description="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å slash –∫–æ–º–∞–Ω–¥—ã")
async def sync(interaction: discord.Interaction):
    await bot.tree.sync()
    await interaction.response.send_message("Slash –∫–æ–º–∞–Ω–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")


# ---------------------------------------------------------
# –ú–∞–≥–∞–∑–∏–Ω
class ShopView(discord.ui.View):

    def __init__(self):
        super().__init__()
        self.add_item(ShopButton("1Ô∏è‚É£", 1, 5000))
        self.add_item(ShopButton("2Ô∏è‚É£", 2, 9999))
        self.add_item(ShopButton("3Ô∏è‚É£", 3, 3500))


class ShopButton(discord.ui.Button):

    def __init__(self, label, item, price):
        super().__init__(label=label, style=discord.ButtonStyle.green)
        self.item = item
        self.price = price

    async def callback(self, interaction: discord.Interaction):
        user = members_data.get(interaction.user.id)
        if not user:
            await interaction.response.send_message("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
                                                    ephemeral=True)
            return
        if user['points'] < self.price:
            await interaction.response.send_message("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–∏–Ω—Ç–æ–≤!",
                                                    ephemeral=True)
            return
        user['points'] -= self.price
        msg = f"–í—ã –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä {self.item}, —Ü–µ–Ω–∞: {self.price}, –¥–∞—Ç–∞: {datetime.datetime.now().strftime('%Y-%m-%d')}, –æ—Å—Ç–∞—Ç–æ–∫: {user['points']}"
        await interaction.user.send(msg)
        await log(msg)
        await interaction.response.send_message("–ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!",
                                                ephemeral=True)


@bot.tree.command(name="shopkveyt", description="–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω")
async def shopkveyt(interaction: discord.Interaction):
    embed = discord.Embed(title="–ú–∞–≥–∞–∑–∏–Ω")
    embed.add_field(name="1Ô∏è‚É£ –ë–æ–ª—å—à–∞—è —Å—É–º–∫–∞", value="–¶–µ–Ω–∞: 5000", inline=False)
    embed.add_field(name="2Ô∏è‚É£ 100.000", value="–¶–µ–Ω–∞: 9999", inline=False)
    embed.add_field(name="3Ô∏è‚É£ –ó–∞—Ä—è–¥", value="–¶–µ–Ω–∞: 3500", inline=False)
    await interaction.response.send_message(embed=embed,
                                            view=ShopView(),
                                            ephemeral=True)


# ---------------------------------------------------------
# –°—Ç–∞—Ä—Ç
@bot.event
async def on_ready():
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑ –≤ 30 –º–∏–Ω—É—Ç
    check_activity.start()


# ---------------------------------------------------------
bot.run(
    'MTM5MDA3MDc4MTgzMjIwNDM2OA.GbK1FJ.AIZYyRf_g0gLk1NAHWHQyuTwDlQ6ldJX2Bifx8')
